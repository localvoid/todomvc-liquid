part of todomvc;

/// Main Component.
///
/// Components explanation in "lib/src/views/app.dart" file.
///
/// This Component is using Event delegation as it should be done, and
/// not like all this global HashMap nonsense (really, what is the point?
/// slow DOM operations in old browsers?)
///
/// And just to demonstrate that Components can be stateful, we will update
/// children Components state from our event callbacks.
class Main extends VComponent {
  List<TodoItem> shownTodos;
  int activeCount;
  TodoModel _model;
  List<VDomComponent> _todoItems;

  Main(Object key, Component parent, this.shownTodos, this.activeCount, this._model)
      : super(key, 'section', parent) {
    // Here we are assigning id directly, because it will never change
    // in build() method. So it is just a matter of preference
    element.id = 'main';

    Zone.ROOT.run(() {
      // Registering event callbacks
      element
          ..onKeyDown.matches('.edit').listen(_editKeyDown)
          ..onInput.matches('.edit').listen(_editInput)
          ..onDoubleClick.matches('label').listen(_labelDoubleClick)
          ..onClick.matches('.destroy').listen(_destroyClick)
          ..onBlur.capture(_handleBlur); // blur doesn't propagate

      element.onChange
          ..matches('.toggle').listen(_toggleItem)
          ..matches('#toggle-all').listen(_toggleAll);
    });
  }

  TodoItemView findByKey(Object key) {
    return _todoItems.firstWhere((i) => i.key == key).component;
  }

  /// Find key value from one of its children elements
  int _findKey(Element e) {
    // `queryMatchingParent(element, selector)` is a simple helper, that will
    // search for parent element that matches this selector.
    final itemElement = queryMatchingParent(e, 'li');
    final key = int.parse(itemElement.dataset['key']);
    return key;
  }

  /// Toggle all items
  void _toggleAll(Event e) {
    final checked = (e.target as CheckboxInputElement).checked;
    _model.toggleAll(checked);
    e.stopPropagation();
  }

  /// Togle one item
  void _toggleItem(Event e) {
    final key = _findKey(e.target);
    final checked = (e.target as CheckboxInputElement).checked;
    _model.toggleTodoCompleted(key, checked);
    e.stopPropagation();
  }

  /// Remove item
  void _destroyClick(MouseEvent e) {
    final key = _findKey(e.target);
    _model.removeTodoItem(key);
    e.preventDefault();
    e.stopPropagation();
  }

  void _handleBlur(FocusEvent e) {
    if ((e.target as Element).matches('.edit')) {
      final key = _findKey(e.target);

      // Here we are using `findByKey` method that will return child component
      // with this key.
      //
      // It is useful when Components are stateful, like in this example.
      final c = findByKey(key);
      if (c.isEditing) {
        _model.updateTodoTitle(key, c.editingTitle);
        c.stopEdit();
      }
      e.stopPropagation();
    }
  }

  /// Cancel or update on esc/enter
  void _editKeyDown(KeyboardEvent e) {
    if (e.keyCode == KeyCode.ENTER || e.keyCode == KeyCode.ESC) {
      final key = _findKey(e.target);
      final c = findByKey(key);
      if (e.keyCode == KeyCode.ENTER){
        _model.updateTodoTitle(key, c.editingTitle);
      }
      c.stopEdit();
      e.stopPropagation();
    }
  }

  /// Update input
  void _editInput(Event e) {
    final key = _findKey(e.target);
    final newTitle = (e.target as InputElement).value;
    final c = findByKey(key);
    c.editingTitle = newTitle;
    e.stopPropagation();
  }

  /// Edit item
  void _labelDoubleClick(MouseEvent e) {
    final key = _findKey(e.target);
    final c = findByKey(key);
    c.startEdit();
    e.preventDefault();
    e.stopPropagation();
  }

  /// build method explanation in "lib/src/views/app.dart" file.
  v.Element build() {
    final activeTodoCount = 0;
    final checkBox = new CheckBox(0,
        checked: activeCount == 0,
        attributes: const {'id': 'toggle-all'});

    _todoItems = shownTodos.map((i) => component(i.id, TodoItemView.init(i))).toList();
    final todoListContainer = vdom.ul(1, _todoItems,
        attributes: const {'id': 'todo-list'});

    return vdom.section(0, [checkBox, todoListContainer]);
  }

  /// Update properties and update view if it is changed.
  ///
  /// It is not necessary to create such method, it is just a convention.
  ///
  /// This method should be called only from UpdateLoop:write phase, so we
  /// can check if properties are changed and update view if necessary.
  void updateProperties(List<TodoItem> newShownTodos, int newActiveCount) {
    shownTodos = newShownTodos;
    activeCount = newActiveCount;
    update();
  }

  /// Static virtual constructor that creates Virtual DOM nodes for this
  /// Component.
  ///
  /// It is also just a convention, you can create Virtual DOM nodes in any way
  /// you like.
  ///
  /// Initially I thought about this constructor, as well as `updateProperties`
  /// method as a boilerplate that should be generated by some pub transformer.
  /// Now I don't think so, and it is quite useful concept to master if you
  /// are planning to use this library.
  ///
  /// The key idea here is a callback that is passed to the new [VDomComponent]
  /// object.
  ///
  /// The callback function have just one argument, it is the real [Component]
  /// object.
  ///
  /// When this argument is null, callback function should create a new
  /// [Component] and return it.
  /// If it isn't null, it means that [Component] is transfered from the old
  /// VDom tree to the new one, and it will be passed as an argument to the
  /// callback.
  ///
  /// So if we want to support data-flow model, we can just update our
  /// properties when component argument isn't null.
  ///
  /// Callback will be always executed in UpdateLoop:write phase, so we can
  /// call `update()` method instead of `invalidate()`.
  static init(List<TodoItem> shownTodos, int activeCount, TodoModel model) {
    return (component, key, context) {
      if (component == null) {
        return new Main(key, context, shownTodos, activeCount, model);
      }
      component.updateProperties(shownTodos, activeCount);
    };
  }
}
